/* PCC.java */
/* Generated By:JavaCC: Do not edit this line. PCC.java */
package javacc;

import java.util.LinkedList;
import java.util.List;
import java.util.LinkedHashMap;
import java.util.TreeMap;
import java.util.HashMap;
import java.util.Map;
import java.util.ListIterator;
import java.util.Stack;
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;

import java.util.regex.Pattern;

import java.io.FileInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.ByteArrayInputStream;

import java.nio.file.Files;

import java.io.InputStream;
import java.nio.charset.Charset;

//Pseudocode Compiler
public class PCC implements PCCConstants {

        public static Map<String, Object> scope = new HashMap<String, Object>();

        public static void parse(String input) {
                try {
                        InputStream inputStream = new ByteArrayInputStream(input.getBytes(Charset.forName("UTF-8")));
                        new PCC(inputStream).input();
                } catch(Exception e) {
                        e.printStackTrace();
                        return;
                }
        }

        public static Object addToVar(Object o, String varName) {
                Object variable = scope.get(varName);
                if(variable instanceof List) {
                        List l = (List) variable;
                        l.add(o);
                        return l;
                } else if(variable instanceof String) {
                        String str = (String) variable;
                        if(o instanceof List) {
                                List list = (List) o;
                                for(Object listElement : list) {
                                        scope.put(varName, addToVar(listElement, varName));
                                }
                                return scope.get(varName);
                        }
                        return new StringBuilder(str).append(o).toString();
                } else if(variable instanceof Number) {
                        Number number = (Number) variable;
                        double c = number.doubleValue();
                        if(o instanceof List) {
                                List list = (List) o;
                                for(Object listElement : list) {
                                        scope.put(varName, addToVar(listElement, varName));
                                }
                                return scope.get(varName);
                        } else if(o instanceof Number) {
                                Number n = (Number) o;
                                c += n.doubleValue();
                                if(Math.floor(c) == c) {
                                        return (int) c;
                                } else {
                                        return c;
                                }
                        } else if(o instanceof String) {
                                String str = new StringBuilder(((String) o)).reverse().toString();
                                char[] arr = str.toCharArray();
                                for(int i = 0; i < arr.length; i++) {
                                        c += arr[i];// * Math.pow(2, 8 * i);
                                }
                                if(Math.floor(c) == c) {
                                        return (int) c;
                                } else {
                                        return c;
                                }
                        }
                        return c; //wat
                }
                return null; //wat
        }

        enum ModificationType {
                INCREMENT, DECREMENT
        }

        public static boolean evaluate(Object o1, Object o2, Token op) {
                return false;
        }

        public static Object modify(Object o, ModificationType type) {
                if(o instanceof String) {
                        String str = (String) o;
                        char c = str.charAt(str.length() - 1);

                        switch(type) {
                                case INCREMENT: c++; break;
                                case DECREMENT: c--; break;
                        }

                        StringBuilder builder = new StringBuilder(str);
                        builder.replace(str.length() - 1, str.length(), String.valueOf(c));
                        return builder.toString();
                } else if(o instanceof List) {
                        List l = (List) o;
                        ListIterator it = l.listIterator();
                        while(it.hasNext()) {
                                it.set(modify(it.next(), type));
                        }
                        return l;
                } else if(o instanceof Number) {
                        Number number = (Number) o;
                        if(number.doubleValue() == number.intValue()) {
                                int c = number.intValue();
                                switch(type) {
                                        case INCREMENT: c++; break;
                                        case DECREMENT: c--; break;
                                }
                                return c;
                        } else {
                                double c = number.doubleValue();
                                switch(type) {
                                        case INCREMENT: c++; break;
                                        case DECREMENT: c--; break;
                                }
                                return c;
                        }
                }
                return o;
        }

/** Main endpoint */
  final public void input() throws ParseException, Exception {
    program();
  }

  final public void program() throws ParseException, Exception {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PRINT:
      case ADD:
      case SET:
      case LET:
      case IF:
      case COMMENT_STARTER:
      case VAR_NAME:
      case NEWLINE:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PRINT:
      case ADD:
      case SET:
      case LET:
      case IF:
      case VAR_NAME:{
        statement();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NEWLINE:{
          jj_consume_token(NEWLINE);
          break;
          }
        case 0:{
          jj_consume_token(0);
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case COMMENT_STARTER:{
        jj_consume_token(COMMENT_STARTER);
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMENT_STRING:{
            ;
            break;
            }
          default:
            jj_la1[2] = jj_gen;
            break label_2;
          }
          jj_consume_token(COMMENT_STRING);
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case END_COMMENT:{
          jj_consume_token(END_COMMENT);
          break;
          }
        case 0:{
          jj_consume_token(0);
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case NEWLINE:{
        jj_consume_token(NEWLINE);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void statement() throws ParseException, Exception {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PRINT:{
      printStatement();
      break;
      }
    case SET:
    case LET:
    case VAR_NAME:{
      if (jj_2_1(2)) {
        variableAssignment();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VAR_NAME:{
          variableModification();
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
      }
    case ADD:{
      addElementToVariable();
      break;
      }
    case IF:{
      ifStatement();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void addElementToVariable() throws ParseException, Exception {Object elem; Token varName;
    jj_consume_token(ADD);
    elem = element();
    jj_consume_token(TO);
    varName = jj_consume_token(VAR_NAME);
scope.put(varName.image, addToVar(elem, varName.image));
  }

//Object addElementToElement() throws Exception : { Object elem1; Object elem2; } {
//  	< ADD >
//  	elem1 = element()
//  	< TO >
//  	elem2 = element()
//  	{ return addToElement(elem1, elem2); }
//}
  final public 
void ifStatement() throws ParseException, Exception {boolean success; boolean elsed = false;
    jj_consume_token(IF);
    success = evaluation();
if(!success) {
                        while(this.token.kind != PCCConstants.ENDIF && this.token.kind != PCCConstants.ELSE) {
//				System.out.println(this.token.kind);
                                this.token = getNextToken();
                        }
                        elsed = this.token.kind == PCCConstants.ELSE;
                }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PRINT:
      case ADD:
      case SET:
      case LET:
      case IF:
      case ELSE:
      case VAR_NAME:
      case NEWLINE:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ELSE:{
        jj_consume_token(ELSE);
if(success) {
                                while(this.token.kind != PCCConstants.ENDIF) {
                                        this.token = getNextToken();
                                }
                }
        break;
        }
      case PRINT:
      case ADD:
      case SET:
      case LET:
      case IF:
      case VAR_NAME:{
        statement();
        break;
        }
      case NEWLINE:{
        jj_consume_token(NEWLINE);
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
if(success) {
                        getNextToken();
//	  	    if(elsed) {
//				while(this.token.kind != PCCConstants.ENDIF) {
//					this.token = getNextToken();
//				}
//	  		}
                }

                if (elsed){
                        while(this.token.kind != PCCConstants.ENDIF) {
                                this.token = getNextToken();
                        }
                }
  }

  final public boolean evaluation() throws ParseException, Exception {Object elem1; Object elem2 = null; Token op = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      jj_consume_token(NOT);
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    elem1 = element();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQUALS:
    case OPERATOR:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPERATOR:{
        op = jj_consume_token(OPERATOR);
        break;
        }
      case EQUALS:{
        op = jj_consume_token(EQUALS);
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      elem2 = element();
if(elem1.equals(elem2) && op.image.equals("=")) {
                        {if ("" != null) return true;}
            }
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
{if ("" != null) return evaluate(elem1,elem2,op);}
    throw new Error("Missing return statement in function");
  }

  final public void printStatement() throws ParseException, Exception {Object elem;
    jj_consume_token(PRINT);
    elem = element();
System.out.print(elem);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:
    case AND:{
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        elem = element();
System.out.print(", " + elem);
      }
      jj_consume_token(AND);
      elem = element();
System.out.print(" and " + elem);
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      ;
    }
System.out.println();
  }

  final public String string() throws ParseException, Exception {Token character;
StringBuilder builder = new StringBuilder();
    jj_consume_token(QUOTEMARK);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING_CHAR:{
        ;
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        break label_5;
      }
      character = jj_consume_token(STRING_CHAR);
builder.append(character.image);
    }
    jj_consume_token(ENDQUOTE);
{if ("" != null) return builder.toString();}
    throw new Error("Missing return statement in function");
  }

  final public void variableAssignment() throws ParseException, Exception {Token varName; Object element;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR_NAME:{
      varName = jj_consume_token(VAR_NAME);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUALS:{
        jj_consume_token(EQUALS);
        break;
        }
      case IS:{
        jj_consume_token(IS);
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      element = element();
      break;
      }
    case SET:{
      jj_consume_token(SET);
      varName = jj_consume_token(VAR_NAME);
      jj_consume_token(TO);
      element = element();
      break;
      }
    case LET:{
      jj_consume_token(LET);
      varName = jj_consume_token(VAR_NAME);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BE:{
        jj_consume_token(BE);
        break;
        }
      case EQUALS:{
        jj_consume_token(EQUALS);
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      element = element();
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
scope.put(varName.image, element);
  }

  final public void variableModification() throws ParseException, Exception {Token varName; Object elem;
StringBuilder builder = new StringBuilder();
    varName = jj_consume_token(VAR_NAME);
elem = scope.get(varName.image);
    elem = modification(elem);
scope.put(varName.image, elem);
  }

  final public Object element() throws ParseException, Exception {Token token; Object elem;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case QUOTEMARK:{
      elem = string();
      break;
      }
    case NUMBER:{
      token = jj_consume_token(NUMBER);
if(token.image.contains(".")) {
                elem = Double.parseDouble(token.image);
                } else {
                        elem = Integer.parseInt(token.image);
                }
                {if ("" != null) return elem;}
      break;
      }
    case OPEN_SQUARE:{
      elem = set();
      break;
      }
    case VAR_NAME:{
      token = jj_consume_token(VAR_NAME);
elem = scope.get(token.image);
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    elem = modification(elem);
{if ("" != null) return elem;}
    throw new Error("Missing return statement in function");
  }

  final public Object modification(Object elem) throws ParseException, Exception {
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INCREMENT:
      case DECREMENT:{
        ;
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INCREMENT:{
        jj_consume_token(INCREMENT);
elem = modify(elem, ModificationType.INCREMENT);
        break;
        }
      case DECREMENT:{
        jj_consume_token(DECREMENT);
elem = modify(elem, ModificationType.DECREMENT);
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return elem;}
    throw new Error("Missing return statement in function");
  }

  final public List set() throws ParseException, Exception {Token character; Object element;
List list = new LinkedList();
    jj_consume_token(OPEN_SQUARE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CLOSE_SQUARE:{
      jj_consume_token(CLOSE_SQUARE);
      break;
      }
    case QUOTEMARK:
    case OPEN_SQUARE:
    case VAR_NAME:
    case NUMBER:{
      element = element();
list.add(element);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA);
        element = element();
list.add(element);
      }
      jj_consume_token(CLOSE_SQUARE);
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return list;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3R_10()
 {
    if (jj_scan_token(SET)) return true;
    if (jj_scan_token(VAR_NAME)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_11()
 {
    if (jj_scan_token(LET)) return true;
    if (jj_scan_token(VAR_NAME)) return true;
    return false;
  }

  private boolean jj_3R_8()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_9()
 {
    if (jj_scan_token(VAR_NAME)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) return true;
    }
    return false;
  }

  /** Generated Token Manager. */
  public PCCTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1490d800,0x10000001,0x2000000,0x1000001,0x1490d800,0x4000000,0x410d800,0x1430d800,0x1430d800,0x80000,0x600,0x600,0x40,0x40040,0x8,0x20200,0x10200,0x400c000,0xc000012,0x180,0x180,0x40,0xc000032,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public PCC(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PCC(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PCCTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public PCC(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PCCTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
      jj_input_stream = new SimpleCharStream(stream, 1, 1);
   } else {
      jj_input_stream.ReInit(stream, 1, 1);
   }
   if (token_source == null) {
      token_source = new PCCTokenManager(jj_input_stream);
   }

    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public PCC(PCCTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(PCCTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) {
       return;
    }

    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];

      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }

      for (int[] oldentry : jj_expentries) {
        if (oldentry.length == jj_expentry.length) {
          boolean isMatched = true;

          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              isMatched = false;
              break;
            }

          }
          if (isMatched) {
            jj_expentries.add(jj_expentry);
            break;
          }
        }
      }

      if (pos != 0) {
        jj_lasttokens[(jj_endpos = pos) - 1] = kind;
      }
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[32];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 23; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 32; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
      try {
        JJCalls p = jj_2_rtns[i];

        do {
          if (p.gen > jj_gen) {
            jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
            switch (i) {
              case 0: jj_3_1(); break;
            }
          }
          p = p.next;
        } while (p != null);

        } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }

    p.gen = jj_gen + xla - jj_la; 
    p.first = token;
    p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
